{
  "extName": {
    "message": "拡張ユニバーサル音声入力",
    "description": "Extension name."
  },
  "extDescription": {
    "message": "文脈修正、展開可能なメニュー、入力クリア、自動送信機能を備えた、あらゆるウェブサイト向けの音声入力。SPA対応。",
    "description": "Extension description."
  },
  "menuTooltip": {
    "message": "メニューを開く/閉じる",
    "description": "Tooltip for the main menu button."
  },
  "micTooltip": {
    "message": "マイク（入力フィールドを自動認識）",
    "description": "Tooltip for the microphone button."
  },
  "micTooltipAlwaysOn": {
    "message": "マイク（常時オン - ダブルクリックで解除）",
    "description": "Tooltip for the microphone button when always-on mode is active."
  },
  "appendTooltip": {
    "message": "追記モード（オン/オフ）\n音声認識時に既存テキストに追記します",
    "description": "Tooltip for the append mode button."
  },
  "clearTooltip": {
    "message": "入力フィールドをクリア\n現在の入力フィールドの内容を消去します",
    "description": "Tooltip for the clear button."
  },
  "proofreadTooltip": {
    "message": "内容を校閲 (GPT-4.1)\n入力フォームの内容全体を高精度モデルで校閲します",
    "description": "Tooltip for the proofread button."
  },
  "editTooltip": {
    "message": "テキストを編集 (GPT-4.1)\n入力フォームの内容を指示に基づいて編集します",
    "description": "Tooltip for the edit button."
  },
  "settingsTooltip": {
    "message": "OpenAI APIキーを設定 (GPT-4.1-mini / GPT-4.1用)",
    "description": "Tooltip for the settings button."
  },
  "historyTooltip": {
    "message": "音声入力履歴を表示",
    "description": "Tooltip for the history button."
  },
  "statusListening": {
    "message": "聞いています...",
    "description": "Status message when listening."
  },
  "statusListeningAppend": {
    "message": "聞いています...（追記）",
    "description": "Status message when listening in append mode."
  },
  "statusInputFound": {
    "message": "入力フィールドを選択",
    "description": "Status message when an input field is found/selected."
  },
  "statusInputNotFound": {
    "message": "入力フィールドが見つかりません",
    "description": "Status message when no input field is found."
  },
  "statusClearSuccess": {
    "message": "入力フィールドをクリアしました",
    "description": "Status message when input field is cleared."
  },
  "statusClearNotFound": {
    "message": "クリア対象の入力フィールドが見つかりません",
    "description": "Status message when no input field is found to clear."
  },
  "statusAppendOn": {
    "message": "追記モード: オン (元のテキストを維持して追記します)",
    "description": "Status message when append mode is turned on."
  },
  "statusAppendOff": {
    "message": "追記モード: オフ",
    "description": "Status message when append mode is turned off."
  },
  "statusProofreading": {
    "message": "テキスト全体を校閲中...",
    "description": "Status message during proofreading."
  },
  "statusProofreadingModel": {
    "message": "$model$ でテキスト全体を校閲中...",
    "description": "Status message during proofreading indicating the model.",
    "placeholders": {
        "model": {
            "content": "$1",
            "example": "gpt-4-turbo"
        }
    }
  },
  "statusProofreadSuccess": {
    "message": "校閲が完了しました",
    "description": "Status message when proofreading is successful."
  },
  "statusProofreadError": {
    "message": "校閲中にエラーが発生しました",
    "description": "Status message when proofreading fails."
  },
   "statusProofreadErrorDetail": {
    "message": "校閲処理でエラーが発生しました: $error$",
    "description": "Status message when proofreading fails with details.",
    "placeholders": {
      "error": {
        "content": "$1",
        "example": "Network error"
      }
    }
  },
  "statusProofreadNotFound": {
    "message": "校閲対象の入力フィールドが見つかりません",
    "description": "Status message when no input field is found for proofreading."
  },
  "statusProofreadEmpty": {
    "message": "校閲する内容がありません",
    "description": "Status message when trying to proofread empty content."
  },
  "statusEditNotFound": {
    "message": "編集対象の入力フィールドが見つかりません",
    "description": "Status message when no input field is found for editing."
  },
  "statusEditEmpty": {
    "message": "編集する内容がありません",
    "description": "Status message when trying to edit empty content."
  },
  "statusEditInstructionEmpty": {
    "message": "編集指示が入力されていません",
    "description": "Status message when edit instruction is empty."
  },
  "statusEditingError": {
    "message": "編集処理中にエラーが発生しました",
    "description": "Status message when editing fails."
  },
  "statusEditingComplete": {
    "message": "テキストの編集が完了しました",
    "description": "Status message when editing is complete."
  },
  "statusApiKeyMissing": {
    "message": "APIキーが設定されていません。設定ボタンから設定してください。",
    "description": "Status message when API key is missing."
  },
  "statusApiKeyInvalid": {
    "message": "APIキーは「sk-」で始まる必要があります",
    "description": "Status message for invalid API key format."
  },
  "statusApiKeySaveSuccess": {
    "message": "APIキーを保存しました",
    "description": "Status message when API key is saved successfully."
  },
  "statusApiKeySaveError": {
    "message": "APIキー保存に失敗しました",
    "description": "Status message when API key saving fails."
  },
  "statusSpeechError": {
    "message": "エラー: $error$",
    "description": "Generic speech recognition error message.",
    "placeholders": {
      "error": {
        "content": "$1",
        "example": "network"
      }
    }
  },
  "statusSpeechErrorNoSpeech": {
    "message": "音声が検出されませんでした",
    "description": "Speech recognition error: no speech detected."
  },
  "statusSpeechErrorAudioCapture": {
    "message": "マイクにアクセスできません",
    "description": "Speech recognition error: audio capture failed."
  },
  "statusSpeechErrorNotAllowed": {
    "message": "マイクの使用が許可されていません",
    "description": "Speech recognition error: microphone permission denied."
  },
  "statusSpeechStartError": {
    "message": "音声認識を開始できませんでした",
    "description": "Error message when speech recognition fails to start."
  },
  "statusSpeechStop": {
    "message": "音声入力停止",
    "description": "Status message when speech input is stopped."
  },
  "statusCorrecting": {
    "message": "GPT-4.1-miniで校閲中...",
    "description": "Status message during GPT correction."
  },
  "statusCorrectionSuccess": {
    "message": "GPT校閲完了",
    "description": "Status message when GPT correction is successful."
  },
  "statusCorrectionError": {
    "message": "GPT校閲エラー: $error$",
    "description": "Status message when GPT correction fails.",
     "placeholders": {
      "error": {
        "content": "$1",
        "example": "API Error"
      }
    }
  },
  "statusCorrectionSkip": {
    "message": "APIキー未設定。校閲スキップ",
    "description": "Status message when skipping correction due to missing API key."
  },
  "statusCorrectionApiError": {
    "message": "APIエラー: $status$",
    "description": "Status message for OpenAI API errors.",
     "placeholders": {
      "status": {
        "content": "$1",
        "example": "401"
      }
    }
  },
  "statusCorrectionApiKeyInvalid": {
    "message": "APIキーが無効です。設定を確認してください。",
    "description": "Status message for invalid API key from API response."
  },
  "statusCorrectionResponseError": {
    "message": "GPT応答エラー。校閲スキップ",
    "description": "Status message for unexpected API response."
  },
   "statusAlwaysOnEnabled": {
    "message": "常時オンモード有効 (ダブルクリックで解除)",
    "description": "Status message when always-on mode is enabled."
  },
  "statusAlwaysOnDisabled": {
    "message": "常時オンモード無効",
    "description": "Status message when always-on mode is disabled."
  },
  "modalSettingsTitle": {
    "message": "OpenAI APIキー設定",
    "description": "Title for the settings modal."
  },
  "modalSettingsDescription": {
    "message": "音声認識後の自動校正 (GPT-4.1-mini) および手動校閲 (GPT-4.1) のためのAPIキーを入力してください。APIキーは拡張機能のストレージに保存され、OpenAIのAPIにのみ使用されます。",
    "description": "Description text in the settings modal."
  },
  "modalSettingsInputPlaceholder": {
    "message": "sk-...",
    "description": "Placeholder for the API key input field."
  },
  "modalSettingsLangLabel": {
    "message": "音声認識言語:",
    "description": "Label for the language selection dropdown in settings."
  },
  "modalSettingsLangJa": {
    "message": "日本語 (ja-JP)",
    "description": "Japanese language option in settings."
  },
  "modalSettingsLangEn": {
    "message": "英語 (en-US)",
    "description": "English language option in settings."
  },
  "modalSettingsLangVi": {
    "message": "ベトナム語 (vi-VN)",
    "description": "Vietnamese language option in settings."
  },
  "modalSettingsButtonCancel": {
    "message": "キャンセル",
    "description": "Cancel button text in the settings modal."
  },
  "modalSettingsButtonSave": {
    "message": "保存",
    "description": "Save button text in the settings modal."
  },
  "historyPanelTitle": {
    "message": "音声入力履歴:",
    "description": "Title for the history panel."
  },
  "historyPanelEmpty": {
    "message": "履歴はありません",
    "description": "Message shown when history is empty."
  },
  "logDomObserverStart": {
    "message": "DOM変更の監視を開始します（SPA対応）",
    "description": "Log message when the DOM observer starts."
  },
  "logSpaNavigationDetected": {
    "message": "SPA画面遷移を検出: 新しいテキストエリアが見つかりました",
    "description": "Log message when SPA navigation is detected."
  },
  "logSpaUiReinit": {
    "message": "SPA画面遷移後のUI再初期化を実行します",
    "description": "Log message when reinitializing UI after SPA navigation."
  },
  "logPollingUiNotFound": {
    "message": "ポーリングによるチェック: UIが見つからないため再初期化します",
    "description": "Log message when UI is not found during polling check."
  },
  "logForceSetSuccess": {
    "message": "テキストエリアの値を強制的に設定しました:",
    "description": "Log message when force setting textarea value succeeds."
  },
  "logForceSetError": {
    "message": "テキストエリア値の強制設定に失敗:",
    "description": "Log message when force setting textarea value fails."
  },
  "logTypingSimulateError": {
    "message": "タイピングシミュレートエラー:",
    "description": "Log message when typing simulation fails."
  },
  "logPaperPlaneButtonFound": {
    "message": "紙飛行機アイコン付き送信ボタンを発見しました",
    "description": "Log message when the paper plane submit button is found."
  },
  "logBgPrimaryButtonFound": {
    "message": "bg-primary/40クラスを持つ送信ボタンを発見しました",
    "description": "Log message when a submit button with bg-primary/40 class is found."
  },
  "logPaperPlaneButtonDisabled": {
    "message": "紙飛行機送信ボタンが無効状態です。Reactのステート更新を促します...",
    "description": "Log message when the paper plane button is disabled."
  },
  "logSubmitButtonDisabled": {
    "message": "送信ボタンが無効状態です。Reactのステート更新を促します...",
    "description": "Log message when the submit button is disabled."
  },
  "logStateUpdateError": {
    "message": "ステート更新促進エラー:",
    "description": "Log message when triggering state update fails."
  },
  "logSubmitButtonCandidates": {
    "message": "送信ボタン候補:",
    "description": "Log message showing submit button candidates."
  },
  "logInitializing": {
    "message": "Enhanced Voice Input Script v$version$ (Extension) を初期化中...",
    "description": "Log message during initialization.",
    "placeholders": {
      "version": {
        "content": "$1",
        "example": "1.7"
      }
    }
  },
  "logSpeechNotSupported": {
    "message": "このブラウザは音声認識をサポートしていません。",
    "description": "Log message when Speech Recognition API is not supported."
  },
  "alertSpeechNotSupported": {
    "message": "お使いのブラウザは音声認識をサポートしていません。",
    "description": "Alert message when Speech Recognition API is not supported."
  },
  "logUiAlreadyExists": {
    "message": "UIは既に存在します。",
    "description": "Log message when UI elements already exist."
  },
  "logInitializationComplete": {
    "message": "Enhanced Voice Input Script v$version$ (Extension) の初期化が完了しました。",
    "description": "Log message when initialization is complete.",
    "placeholders": {
      "version": {
        "content": "$1",
        "example": "1.7"
      }
    }
  },
  "logSettingsLoaded": {
    "message": "設定を読み込みました:",
    "description": "Log message when settings are loaded."
  },
  "logApiKeySet": {
    "message": "設定済み",
    "description": "Log part indicating API key is set."
  },
  "logApiKeyNotSet": {
    "message": "未設定",
    "description": "Log part indicating API key is not set."
  },
  "logSettingsLoadError": {
    "message": "設定読み込みエラー:",
    "description": "Log message when loading settings fails."
  },
  "logSettingsSaved": {
    "message": "設定を保存しました:",
    "description": "Log message when settings (API key, language) are saved."
  },
  "logSettingsSaveError": {
    "message": "設定の保存に失敗しました:",
    "description": "Log message when saving settings fails."
  },
  "logAlwaysOnModeSaved": {
    "message": "常時オンモード設定を保存しました:",
    "description": "Log message when the always-on mode setting is saved."
  },
  "logAlwaysOnModeSaveError": {
    "message": "常時オンモード設定の保存に失敗しました:",
    "description": "Log message when saving the always-on mode setting fails."
  },
  "alertApiKeyMissing": {
    "message": "APIキーが設定されていません。設定ボタンから設定してください。",
    "description": "Alert message when API key is missing during save attempt."
  },
  "alertApiKeyInvalid": {
    "message": "APIキーの形式が無効です。「sk-」で始まる必要があります。",
    "description": "Alert message for invalid API key format during save attempt."
  },
  "logApiKeySaveError": {
    "message": "APIキー保存エラー:",
    "description": "Log message when saving API key fails."
  },
  "statusSettingsSaveSuccess": {
    "message": "設定を保存しました",
    "description": "Status message when settings are saved successfully."
  },
  "statusSettingsSaveError": {
    "message": "設定の保存に失敗しました",
    "description": "Status message when saving settings fails."
  },
  "alertSpeechApiNotAvailable": {
    "message": "音声認識APIが利用できません。",
    "description": "Alert message when Speech Recognition API is not available."
  },
  "logCorrectionErrorAppend": {
    "message": "校閲処理エラー（追記モード）:",
    "description": "Log message for correction error in append mode."
  },
  "logCorrectionErrorOverwrite": {
    "message": "校閲処理エラー（上書きモード）:",
    "description": "Log message for correction error in overwrite mode."
  },
  "logSpeechRecognitionError": {
    "message": "音声認識エラー:",
    "description": "Log message for speech recognition error."
  },
  "logSpeechStartError": {
    "message": "音声認識開始エラー:",
    "description": "Log message when starting speech recognition fails."
  },
  "logSpeechStopError": {
    "message": "音声認識の停止に失敗しました:",
    "description": "Log message when stopping speech recognition fails."
  },
  "logSpecificTextareaFound": {
    "message": "指定された特定のテキストエリアを発見しました",
    "description": "Log message when the specific textarea is found."
  },
  "logSimilarTextareaFound": {
    "message": "近い仕様のテキストエリアを発見しました",
    "description": "Log message when a similar textarea is found."
  },
  "logTailwindTextareaFound": {
    "message": "Tailwindスタイルのテキストエリアを発見しました",
    "description": "Log message when a Tailwind styled textarea is found."
  },
  "logMessageTextareaFound": {
    "message": "メッセージ用テキストエリアを発見しました",
    "description": "Log message when a message textarea is found."
  },
  "logEventDispatchErrorAppend": {
    "message": "イベント発火エラー（追記）:",
    "description": "Log message for event dispatch error in append mode."
  },
  "logProofreadError": {
    "message": "校閲処理エラー:",
    "description": "Log message for proofreading error."
  },
  "logOpenAiApiError": {
    "message": "OpenAI APIエラー:",
    "description": "Log message for OpenAI API error."
  },
  "logOpenAiApiResponseUnexpected": {
    "message": "OpenAI APIからの予期せぬレスポンス:",
    "description": "Log message for unexpected OpenAI API response."
  },
  "logProofreadRequestError": {
    "message": "GPT校閲リクエストエラー:",
    "description": "Log message for GPT proofread request error."
  },
  "logReactTypingSimulated": {
    "message": "React対応：タイピングシミュレーションで入力しました",
    "description": "Log message when React typing simulation is used."
  },
  "logFallbackMethod": {
    "message": "フォールバック：従来の方法で入力します",
    "description": "Log message when using the fallback input method."
  },
  "logEventDispatchErrorFallback": {
    "message": "イベント発火エラー（フォールバック）:",
    "description": "Log message for event dispatch error in fallback mode."
  },
  "logUiNotFoundHealing": {
    "message": "UI要素が見つかりません。再生成を試みます...",
    "description": "Log message when UI elements are not found during self-healing."
  },
  "logRestartingAlwaysOn": {
    "message": "常時オンモードのため、音声認識を再開します...",
    "description": "Log message when restarting recognition in always-on mode."
  },
  "logExtensionLoaded": {
    "message": "Enhanced Universal Voice Input (Chrome Extension) loaded.",
    "description": "Log message when the extension has finished loading."
  },
  "logApiKeyMissingSkip": {
    "message": "APIキーが設定されていないため、GPT校閲をスキップします。",
    "description": "Log message when skipping GPT correction due to missing API key."
  },
  "logApiRequestFailedUseOriginal": {
    "message": "APIリクエスト失敗 ($status$)。元のテキストを使用します。",
    "description": "Log message when API request fails and original text is used.",
    "placeholders": {
      "status": {
        "content": "$1",
        "example": "401"
      }
    }
  },
  "logApiResponseUnexpected": {
    "message": "OpenAI APIからの予期せぬレスポンス。元のテキストを使用します。",
    "description": "Log message when API response is unexpected and original text is used."
  },
  "logCorrectionRequestErrorUseOriginal": {
    "message": "GPT校閲リクエスト中にエラーが発生しました。元のテキストを使用します。",
    "description": "Log message when correction request fails and original text is used."
  }
}