# Project Rules and Summary for Code Mode

## Development Workflow Requirements

**IMPORTANT:** After making code modifications, always run the following commands:

1.  **Build the project:**
    ```
    npm run build
    ```
    This command performs the following steps:
    *   Bundles `src/content.js` into `dist/content.js` using esbuild.
    *   Bundles `src/background.js` into `dist/background.js` using esbuild.
    *   Copies necessary assets (like `manifest.json`, `_locales`, `*.png`, `style.css`) to the `dist` directory using `scripts/copy-assets.js`.
    **This build step is mandatory as the extension loads files from the `dist` directory.**

2.  **Run tests:**
    ```
    npm test
    ```
    This ensures your changes don't break existing functionality. Tests are configured using `jest.config.js`, `jest.setup.js`, and `babel.config.js`. For more detailed testing options:
    *   `npm run test:watch` - Run tests in watch mode (automatically re-run on file changes)
    *   `npm run test:coverage` - Run tests with coverage report

Failure to follow these steps may result in broken functionality or undetected regressions.

## Task Summary (voice.js Chrome Extension Conversion)

(This section summarizes the historical evolution. Adjust if needed for clarity.)

1.  **Objective:** Convert the Tampermonkey script `voice.js` into a functional Chrome Extension.
2.  **`manifest.json` Creation & Refinement:** Initial setup and permission definition.
3.  **CSS Extraction (`style.css`):** Moved styles to a dedicated file.
4.  **JavaScript Adaptation (`content.js`):** Replaced Tampermonkey APIs with WebExtension APIs (`chrome.storage`, `fetch`), handled async operations.
5.  **Feature Modifications:** Added and later removed auto-submit toggle and manual submit button based on feedback.
6.  **UI Design Update:** Implemented monochromatic theme and SVG icons (`icons.js`).
7.  **Internationalization (i18n):** Added support for multiple languages using `_locales`.
8.  **UI/UX Refinements:** Improved tooltip positioning and menu state handling.

## Current State

*   The extension loads correctly in Chrome with version **3.1** (as per `manifest.json`).
*   Core functionality (voice input, SPA handling, GPT correction, UI) is fully adapted for the extension environment, **utilizing a background script (`background.js`) and content script (`content.js`)**.
*   Auto-submit only triggers in normal mode (not append mode).
*   Manual submit button and auto-submit toggle button have been removed.
*   UI uses a clean monochromatic theme with SVG icons for better rendering across all environments.
*   The extension is internationalized for Japanese (default), English, and Vietnamese.
*   **Modular architecture with specialized modules (`src/modules/`), site-specific handlers (`src/site-handlers/`), and state management (`src/modules/state.js`).**
*   X.com (Twitter) is explicitly marked as non-supported with appropriate user notifications.
*   **Build process implemented with esbuild for JavaScript bundling and a custom script (`scripts/copy-assets.js`) for asset handling.**

## Extension Packaging and Distribution

9.  **Migration to GitHub Actions:** Automated packaging, removed local scripts.
10. **Distribution Options:** Chrome Web Store (ZIP) and Organizational (CRX) via Actions artifacts.
11. **Update Management:** Consistent signing key via GitHub Secrets.

## Tools and Resources Created

*   `.github/workflows/package-extension.yml`: GitHub Actions workflow for automated packaging.
*   **`README.md`**: Contains project overview, features, usage, **privacy policy**, etc.
*   **`RELEASE_GUIDE.md`**: Guide for creating new releases.
*   **`release_notes.md`**: Notes for past releases.
*   `.gitignore`: Configuration to exclude sensitive files and build artifacts from Git.
*   **`scripts/copy-assets.js`**: Node script to copy assets during the build process.
*   **Test configuration files (`jest.config.js`, `jest.setup.js`, `babel.config.js`)**

## GitHub Actions Integration

12. **GitHub Actions Workflow Setup:** Automation for build, packaging, key management, artifact upload.
13. **Security Improvements:** `.gitignore`, key removal from history, Base64 secret encoding.
14. **Documentation Updates:** (Previous `github-actions-guide.md` content likely merged into README or other docs).
15. **CRX File Generation Improvements:** Standards-compliant CRX generation.
16. **Unique Filename Generation:** Timestamp and version-based naming, plus "latest" files.
17. **Artifact Management Enhancements:** Unique artifact names, upload of `dist`, retention policy.

## Final Extension Packaging Solution

Provides a secure, automated solution for generating ZIP and CRX files with versioning and easy distribution via GitHub Actions artifacts.

## Chrome Web Store Publication

18. **Chrome Web Store Upload Requirements:** Icon definition (`otak-voice-128.png`) added.
19. **Extension Naming Standardization:** Consistent "otak-voice" name across locales.
20. **Privacy Policy Implementation:** Comprehensive policy in `README.md`.
21. **Chrome Web Store Compliance:** Permission justifications, remote code documentation, data usage declarations.

## Code Modularization

22. **Content.js and Background.js Modularization:**
    *   Restructured the monolithic `content.js` and introduced `background.js`.
    *   Created a logical directory structure: `src/`, `src/modules/`, `src/site-handlers/`, **`src/__tests__/`**, **`scripts/`**.
    *   Extracted constants into `constants.js`.
    *   Separated core functionality into specialized modules:
        *   `dom-observer.js`: DOM monitoring and SPA support
        *   **`dom-utils.js`**: DOM manipulation utilities
        *   **`error-handler.js`**: Centralized error handling
        *   **`event-bus.js`**: Simple event bus for inter-module communication
        *   `gpt-service.js`: OpenAI API integration
        *   `history.js`: Voice input history tracking
        *   `input-handler.js`: Input field operations
        *   `settings.js`: Configuration management (**likely interacts with `background.js` via messaging**)
        *   `speech.js`: Voice recognition functionality
        *   **`state.js`**: Centralized state management for the content script
        *   `ui.js`: UI creation and management
        *   `utils.js`: Common utility functions
        *   `icons.js`: Centralized SVG icon definitions
    *   **共通インターフェース**: 全サイトハンドラーが実装する標準メソッド：
        *   `findBestInputField()` - 最適な入力フィールドを特定
        *   `findSubmitButtonForInput()` - 入力フィールドに関連する送信ボタンを特定
        *   `submitAfterVoiceInput()` - 音声入力後の送信処理と障害処理
    
    *   **サイト別ハンドラー**: ファイル名はドメイン名に対応（理想的には）
        *   `site-detector.js`: サイト検出モジュール（共通機能）
            - 複数の検出方法（URL、DOM要素、SVGパターン）を組み合わせてサイトタイプを判定
            - 適切なドメインハンドラーを返す`getSiteHandler()`関数
            
        *   `systemexe.js`: systemexe-research-and-development.comドメイン専用
            - 共通: 標準インターフェースの実装
            - 特殊: システム固有のボタン検出（#buttonSubmitMessageConversation）
            - 特殊: cursor-not-allowedスタイルの特殊処理（実際は有効な要素）
            - 特殊: 日英両対応のプレースホルダーを持つテキストエリア検出
            
        *   `twitter.js`: twitter.com/x.comドメイン専用
            - 共通: 標準インターフェースの実装
            - 特殊: 非対応プラットフォームとしてマーク（React/Draft.jsの複雑さにより）
            - 特殊: モーダルダイアログでの認識テキスト表示機能
            - 特殊: Twitterの内部React状態を壊さないための保護措置
            
        *   `ai-chat.js`: 複数のAIチャットプラットフォーム用（理想的には個別ドメインごとのファイルに分割すべき）
            - 共通: 標準インターフェースの実装
            - 特殊: 多様なAIアシスタントUI対応（ChatGPT、Claude、Gemini、Bardなど）
            - 特殊: ペーパーエアプレーンアイコン検出機能
            - 特殊: ボタン状態検出の高度なロジック
            - 特殊: ReactやVueフレームワークの状態更新を待機する遅延処理
            
        *   `default.js`: 未知のドメイン用フォールバックハンドラー
            - 共通: 標準インターフェースの実装
            - 特殊: Tailwind CSSコンポーネント検出
            - 特殊: 汎用的な入力フィールド・送信ボタン検出アルゴリズム
    *   **Added `background.js` for background tasks (e.g., context menus, settings synchronization, potentially long-running operations).**

23. **Architecture Improvements:**
    *   Implemented a site detection system.
    *   Reduced code duplication.
    *   Improved maintainability.
    *   Enhanced extensibility.
    *   Organized dependencies.
    *   Maintained backward compatibility.
    *   Added AI chat site detection.
    *   Marked X.com as non-supported.
    *   **Introduced centralized state management (`state.js`) and an event bus (`event-bus.js`) for better organization.**

24. **Build Process Implementation:**
    *   Added esbuild for JavaScript bundling.
    *   **Added `scripts/copy-assets.js` for copying static assets.**
    *   Created build script (`npm run build`) in `package.json`.
    *   Updated `manifest.json` to reference bundled files from `dist` directory.
    *   Configured GitHub Actions workflow to include build step.
    *   Improved extension versioning (current version: 3.1).
    *   **Required Build Command:** Developers must run `npm run build` after making changes.

## Code Structure Analysis of the otak-voice Project

### Key Modules and Functions

#### Top-level Files (`src/`)

*   **`background.js`**: Handles background tasks, event listeners (e.g., `chrome.runtime.onInstalled`), potentially context menus, and communication with content scripts.
*   `constants.js`: Defines constants (SITE_TYPES, GPT_MODELS, DEFAULT_SETTINGS, PROCESSING_STATE).
*   `content.js`: Main entry point for the content script, initializes modules, orchestrates UI and voice input logic within the web page context. Key functions: `initVoiceInput()`, `setupPeriodicSelfHealing()`, `runInitialization()`.
*   `icons.js`: Defines SVG icons used in the UI.

#### `modules/` Directory

*   `dom-observer.js`: `setupDOMObserver()` for monitoring DOM changes.
*   **`dom-utils.js`**: Utility functions for DOM manipulation (e.g., finding elements, checking visibility).
*   **`error-handler.js`**: Functions for handling and reporting errors consistently.
*   **`event-bus.js`**: Provides `on()`, `off()`, `emit()` for simple event handling between modules.
*   `gpt-service.js`: `correctWithGPT()`, `proofreadWithGPT()`, `editWithGPT()` for interacting with OpenAI API.
*   `history.js`: `addToHistory()`, `updateHistoryPanel()`, `toggleHistoryPanel()` for managing input history.
*   `input-handler.js`: Manages interactions with input fields (`findBestInputField()`, `writeToInputField()`, etc.) and UI menu state (`loadMenuState()`, `saveMenuState()`, `toggleMenu()`).
*   `settings.js`: `loadSettings()`, `saveSettings()` (likely uses `chrome.storage` via messages to `background.js` or directly if permissions allow).
*   `speech.js`: Handles speech recognition lifecycle (`startSpeechRecognition()`, `stopSpeechRecognition()`, `processEditInstruction()`).
*   **`state.js`**: Manages the state of the content script (e.g., `isListening`, `appendMode`, `currentInputElement`). Provides functions to get and set state.
*   `ui.js`: Creates and manages UI elements (`createUI()`, `showStatus()`, `createSettingsModal()`, `updateProcessingState()`).
*   `utils.js`: Common utility functions (`basicCleanup()`, `retryInputEvents()`).

#### `site-handlers/` Directory

**サイトハンドラーモジュール共通構造**:
* 各ハンドラーは共通インターフェースを実装（サイト固有の処理を汎用メソッドでラップ）
* 共通の入力フィールド検出と送信ボタン検出ロジックを各サイトに最適化
* 各ハンドラーはドメイン名に対応したファイル名を持つ（理想的には）

**各サイトハンドラーの役割**:

*   **`site-detector.js`**: サイト検出エンジン（共通機能）
    * URL解析による既知サイト検出
    * DOM要素に基づくAIチャットインターフェース検出（20以上のセレクター）
    * SVGパターン認識によるペーパーエアプレーンアイコン検出
    * `constants.js`からのサイトタイプ定数の返却
    * 適切なハンドラーモジュールの提供

*   **`systemexe.js`**: systemexe-research-and-development.comドメイン専用
    * System.exe独自のボタン検出ロジック
    * cursor-not-allowedスタイルのSVGアイコン特殊処理
    * 日英バイリンガル対応のプレースホルダー検出
    * ホスト名とドキュメントタイトルに基づくSystem.exeサイト検出

*   **`twitter.js`**: twitter.com/x.comドメイン専用
    * Twitter/X.comページ検出と非対応表示
    * React/Draft.jsエディタの内部状態保護
    * 音声認識テキスト表示用モーダルダイアログ
    * ユーザー向け互換性制限通知

*   **`ai-chat.js`**: 複数のAIチャットプラットフォーム対応（将来的には個別ドメイン名のファイルに分割が望ましい）
    * ChatGPT、Claude、Gemini、Bard、Perplexityなど多様なUI対応
    * 様々な実装のペーパーエアプレーンボタン検出
    * ボタン有効/無効状態の高度な検出ロジック
    * ボタンクリック時の視覚的フィードバック
    * Reactフレームワーク状態更新待機のための遅延処理

*   **`default.js`**: 未知のドメイン用汎用ハンドラー
    * Tailwind CSSスタイルコンポーネント検出
    * プレースホルダーテキストに基づく入力フィールド検出
    * 入力フィールドとの近接性に基づく送信ボタン検出
    * フォーカス管理とステータス更新イベント発行

#### **`scripts/` Directory**

*   **`copy-assets.js`**: Node.js script executed during build to copy necessary files (`manifest.json`, `_locales`, images, CSS) to the `dist` folder.

### Project Overview

This project is a Chrome extension enabling voice input on web pages. Main features:
*   Voice recognition and input.
*   GPT integration (correction, proofreading, editing).
*   Site-specific handling.
*   UI management (mic button, settings, history).
*   Settings management (**synced via `chrome.storage` likely managed by `background.js`**).
*   **Background script (`background.js`) manages extension lifecycle events and potentially persistent settings.**
*   **Content script (`content.js`) injects UI and handles interactions within web pages.**
*   **Modular design using specialized modules and site handlers.**
*   **Build process using esbuild and custom scripts.**

## Module Relationships and Dependencies

### Core Initialization Flow

1.  **Background Script (`background.js`):**
    *   Listens for browser events (`onInstalled`, `onMessage`).
    *   May initialize context menus or perform initial setup.
    *   Handles storage operations (`chrome.storage`).
2.  **Content Script (`content.js`):**
    *   Entry point injected into web pages.
    *   Initializes modules: `settings`, `state`, `event-bus`, `ui`, `input-handler`, `speech`, `history`, `dom-observer`, `site-detector`.
    *   Communicates with `background.js` using `chrome.runtime.sendMessage` (likely via `event-bus.js` or dedicated functions).

### Key Module Dependencies (within Content Script)

*   **`state.js`**: Central repository for content script state, accessed by `ui.js`, `input-handler.js`, `speech.js`.
*   **`event-bus.js`**: Facilitates communication between modules, reducing direct dependencies. Used by various modules to signal events (e.g., state change, recognition start/stop).
*   `ui.js`: Depends on `state.js`, `input-handler.js`, `speech.js`, `history.js`, `settings.js`, `icons.js`, `event-bus.js`.
*   `input-handler.js`: Depends on `state.js`, `ui.js`, `site-detector.js`, `gpt-service.js`, `settings.js`, `event-bus.js`.
*   `speech.js`: Depends on `state.js`, `ui.js`, `input-handler.js`, `gpt-service.js`, `event-bus.js`.
*   Other modules depend on `state.js`, `settings.js`, `utils.js`, `event-bus.js` as needed.

### Data Flow Patterns

*   **Settings:** Loaded/saved via `settings.js`, likely involving messaging with `background.js` to interact with `chrome.storage`. Settings data flows to modules needing configuration.
*   **State:** Managed by `state.js`. Changes are often triggered by UI interactions (`ui.js`, `input-handler.js`) or speech events (`speech.js`). Other modules read state from `state.js` or subscribe to state change events via `event-bus.js`.
*   **Voice Input:** `speech.js` → (optional `gpt-service.js`) → `input-handler.js` → Target Element. Events emitted via `event-bus.js`.
*   **Site Handling 処理フロー:**
    1. `site-detector.js`がサイトタイプを検出
    2. 適切なドメインハンドラー（`systemexe.js`, `twitter.js`, `ai-chat.js`など）を選択
    3. ドメインハンドラーが`input-handler.js`と連携して入力処理を実行
    
    **共通インターフェース**:
    * `findBestInputField()` - サイトに最適な入力フィールド検出
    * `findSubmitButtonForInput()` - 入力フィールドに関連する送信ボタン検出
    * `submitAfterVoiceInput()` - 音声入力後の送信ロジック処理
    
    **サイト固有の独自機能**:
    * systemexe.js: `isSystemExePage()`, `findSubmitButton()`
    * twitter.js: `isTwitterPage()`
    * ai-chat.js: `findPaperPlaneButton()`, `findAIChatSubmitButton()`
    
    **将来的な改善**:
    * `ai-chat.js`を個別ドメイン名のファイル（`openai-chatgpt.js`, `anthropic-claude.js`, `google-gemini.js`など）に分割することが望ましい
*   **Background Communication:** Content script modules send messages (e.g., for storage) to `background.js`, potentially receiving responses.

## UI Components and Elements

(No major changes expected here unless `background.js` adds UI elements like context menus)

1.  **Main Menu Button (`#otak-voice-menu-btn`)**
2.  **Menu Container (`#otak-voice-menu-container`)**
3.  **Status Display (`#otak-voice-status`)**
4.  **Settings Modal (`#otak-voice-settings-modal`)**
5.  **History Panel (`#otak-voice-history-panel`)**
6.  **Recognition Result Modal (`#otak-voice-recognition-modal`)**

### Button Elements (within Menu Container)

1.  **Microphone Button (`#otak-voice-input-btn`)**
2.  **Append Mode Button (`#otak-voice-append-btn`)**
3.  **Clear Button (`#otak-voice-clear-btn`)**
4.  **Proofread Button (`#otak-voice-proofread-btn`)**
5.  **Edit Button (`#otak-voice-edit-btn`)**
6.  **Theme Toggle Button (`#otak-voice-theme-toggle-btn`)**
7.  **Settings Button (`#otak-voice-settings-btn`)**
8.  **History Button (`#otak-voice-history-btn`)**

### UI State Management

*   Dynamically created and injected.
*   States indicated via CSS classes.
*   Context-dependent button availability.
*   Adapts to websites, consistent appearance.
*   SVG icons for crisp rendering.
*   Synced light/dark theme.

## Development Workflow

### Local Development Process

1.  **Setup:**
    *   Clone the repository
    *   Run `npm install`

2.  **Making Changes:**
    *   Modify source files in `src`
    *   Update styles in `style.css`
    *   Update localization in `_locales`

3.  **Building:**
    *   Run `npm run build` to generate bundled files and copy assets to `dist` directory.
    *   **Mandatory after any changes in `src` or static assets.**

4.  **Testing:**
    *   Load the extension in Chrome using "Load unpacked" pointing to the **`dist`** directory.
    *   Test functionality.

5.  **Packaging:** Handled by GitHub Actions.

### Continuous Integration

The GitHub Actions workflow automatically:
1. Installs dependencies
2. Runs the build process (`npm run build`)
3. Packages the **contents of the `dist` directory**
4. Creates versioned artifacts

## Code Quality Rules

### Comment Guidelines

1.  **Remove Unnecessarily Redundant Comments:**
    *   Eliminate comments that merely restate what the code obviously does.
    *   Remove duplicate explanations.
    *   Delete commented-out code.
    *   Avoid excessive inline comments.
    *   Keep only comments providing genuine insight or context.

## State Management (Replaces Global Variables Section)

Global variables directly exposed on the `window` object are minimized. State management for the content script is primarily handled by the `src/modules/state.js` module, providing a centralized way to access and modify state like `isListening`, `appendMode`, `currentInputElement`, etc. Modules typically import the state module or listen for state change events via the event bus (`src/modules/event-bus.js`) rather than relying on global variables. Background script state (if any) is managed within `background.js`.
